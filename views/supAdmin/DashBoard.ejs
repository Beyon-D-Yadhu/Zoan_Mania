<%- include('../layouts/admin/header'); -%>

  <div class="col-md-12">
    <div class="d-flex justify-content-between">
      <h1 class="ms-3 mb-5">Admin Dashboard</h1> 
      <!-- < include('./button'); -%> -->
    
    </div>
    <div class="row d-flex justify-content-center">
      <div class="col-10 mb-3 rounded d-flex justify-content-center border p-3 bg-light">
        <div class="row">
          <div class="col-12">
            <div class="">
              <select class="form-select text-center bg-secondary text-light select"
                onchange="fetchSalesData(this.value)" aria-label="Default select example">
                <option class="bg-light text-dark" value="1">Day</option>
                <option class="bg-light text-dark" value="2">Month</option>
                <option class="bg-light text-dark" value="3">Year</option>
              </select>
            </div>
            <h3 class="mt-4">Graph based on price</h3>
            <div class="row d-flex justify-content-center">
              <canvas id="barChart" class="col-10"></canvas>
            </div>

            <h3 class="mt-4">Graph based on sale</h3>
            <div class="row d-flex justify-content-center">
              <canvas id="lineChart" ></canvas>
            </div>


          </div>
          <div class="bestSeller col-12 mt-4">
            <h3 class="mt-4">Best Seller Products</h3>
            <div class="p-3 bg-white border rounded" style="overflow-y: scroll; height:400px">
              <table class="table table-striped table-hover text-center">
                <thead>
                  <tr>
                    <th scope="col">#</th>
                    <th scope="col">Product Image</th>
                    <th scope="col">Product Name</th>
                    <th scope="col">Price</th>
                    <th scope="col">Sale</th>
                  </tr>
                </thead>
                <tbody>
                  <% products.forEach((product, i)=> { %>
                    <tr>
                      <th scope="row">
                        <%= i + 1 %>
                      </th>
                      <td><img height="50px" style="border-radius: 12px;" width="50px"
                          src="/uploads/<%= product.Image[0] %>" alt="img"></td>
                      <td>
                        <%= product.Name %>
                      </td>
                      <td>
                        <%= product.discountedPrice.toFixed(2) %>
                      </td>
                      <td>
                        <%= product.Selled %>
                      </td>
                    </tr>
                    <% }) %>

                </tbody>
              </table>



            </div>

          </div>
          <div class="col-md-12 d-flex flex-column justify-content-center">
            <h4 class="mt-4">Download Sales report</h4>
            <span id="dateError" class="text-danger"></span>
            <label for="startDate">Start Date</label>

            <% let startDate; if (earliestOrder && earliestOrder.OrderDate) { startDate=new
              Date(earliestOrder.OrderDate); } const formatDate=(date)=> {
              if (!date) return ""; // Handle the case when date is undefined
              const day = String(date.getDate()).padStart(2, ' 0');
              const month = String(date.getMonth() + 1).padStart(2, '0');
              const year = date.getFullYear();
              return `${year}-${month}-${day}`;
              };
              const formattedStartDate = formatDate(startDate);
              const minDate = formattedStartDate; %>


              <input class="p-1 border rounded" type="date" value="<%= formattedStartDate %>" name="start"
                id="startDate" min="<%= minDate %>">
              <label for="endDate">End Date</label>
              <input class="p-1 border rounded" type="date" value="<%= formattedStartDate %>" name="end" id="endDate"
                min="<%= minDate %>">
              <!-- <a href='/admin/downloadSalesReport' class="text-center btn btn-success mt-4">Download CSV</a> -->
              <button class="text-center btn btn-success mt-4" onclick="downloadCsv()">Download CSV</button>
              <button class="text-center btn btn-success mt-2" onclick="downloadPdf()">Download PDF</button>
              <!-- <a href="/admin/downloadSalesReportPDF" class="text-center btn btn-success mt-2">Download PDF</a> -->


          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

  <script>

    function downloadCsv() {
      let startDate = new Date($('#startDate').val())
      let endDate = new Date($('#endDate').val())
      if (endDate < startDate) {
        $('#dateError').text('end date should be greater than or equal to startdate')
        return setTimeout(() => {
          $('#dateError').text('')
        }, 3000)
      }
      fetch('/admin/downloadSalesReport', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          startDate, endDate
        })
      }).then(response => response.blob())
        .then(blob => {
          // Create a link element
          const link = document.createElement('a');
          link.href = window.URL.createObjectURL(new Blob([blob]));

          // Set the filename for the download
          link.download = 'sales_report.csv';

          // Append the link to the body
          document.body.appendChild(link);

          // Trigger the click event to start the download
          link.click();

          // Remove the link from the DOM
          document.body.removeChild(link);
        })
        .catch(error => console.error('Error downloading CSV:', error));

    }





    function downloadPdf() {
      let startDate = new Date($('#startDate').val())
      let endDate = new Date($('#endDate').val())
      if (endDate < startDate) {
        $('#dateError').text('end date should be greater than or equal to startdate')
        return setTimeout(() => {
          $('#dateError').text('')
        }, 3000)
      }
      fetch('/admin/downloadSalesReportPDF', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          startDate, endDate
        })
      })
        .then(response => response.blob())
        .then(blob => {
          const link = document.createElement('a');
          link.href = window.URL.createObjectURL(new Blob([blob]));
          link.download = 'sales_report.pdf';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        })
        .catch(error => console.error('Error downloading PDF:', error));

    }












    function fetchSalesData(selectedOption) {
      fetch(`/admin/getSalesData/${selectedOption}`)
        .then(res => res.json())
        .then((data) => {
          const barCtx = document.getElementById('barChart').getContext('2d');
          const dataBar = {
            labels: Object.keys(data.ordersData.income),
            datasets: [{
              label: 'Sales',
              data: Object.values(data.ordersData.income),
              backgroundColor: 'rgba(75, 192, 192, 0.2)',
              borderColor: 'rgba(75, 192, 192, 1)',
              borderWidth: 1
            }]
          };

          const configBar = {
            type: 'bar',
            data: dataBar,
            options: {
              scales: {
                y: { beginAtZero: true },
                x: { beginAtZero: true }
              }
            },
          };

          new Chart(barCtx, configBar);

          const lineCtx = document.getElementById('lineChart').getContext('2d');
          const dataLine = {
            labels: Object.keys(data.ordersData.ordered),
            datasets: [{
              fill: false,
              lineTension: 0,
              backgroundColor: 'rgba(0, 255, 255, 1.0)',
              borderColor: 'rgba(0, 255, 255, 0.4)',
              data: Object.values(data.ordersData.ordered),
            }]
          };

          const configLine = {
            type: 'line',
            data: dataLine,
            options: {
              legend: { display: false },
              scales: { yAxes: [{ ticks: { min: 0 } }] }
            }
          };

          new Chart(lineCtx, configLine);


        })
        .catch(error => console.error('Error fetching sales data:', error));
    }

    document.addEventListener("DOMContentLoaded", function () {
      fetchSalesData(document.querySelector('select').value);
    });
  </script>

  <%- include('../layouts/admin/footer'); -%>